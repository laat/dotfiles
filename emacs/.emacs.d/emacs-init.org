#+TITLE: Emacs Configuration
#+AUTHOR: Sigurd Fosseng
#+EMAIL: sigurd@fosseng.net
#+OPTIONS: toc:3 num:nil ^:nil

* Emacs conf i org-mode
** init.el

   I oppstarten av emacs kalles kjøres =init.el=, jeg skriver
   configfila i org-mode så da er oppgaven å hente ut config fra .org
   fila

   #+begin_src emacs-lisp :tangle no
     (setq vc-follow-symlinks t) ;; no symlik question at startup
     (require 'ob-tangle)
     ;; (setq debug-on-error t)
     (org-babel-load-file
      (expand-file-name "emacs-init.org"
                        user-emacs-directory))
   #+end_src

* Grunnleggende oppsett av Emacs
** Skjul menyer og scrollbar
   #+begin_src emacs-lisp
     (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
     (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+end_src
** Melpa med package.el og use-package.el
   Det er kjekt å ha pakke-repositories installert og =use-package=
   installert. Denne lille snutten passer på at det jeg trenger er installert.

   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

     (defun ensure-packages-installed (packages)
       (unless package-archive-contents
         (package-refresh-contents))
       (mapcar
        (lambda (package)
          (if (package-installed-p package)
              package
            (progn (message (format "Installing package %s." package))
                   (package-install package))))
        packages))
     (package-initialize)

     (ensure-packages-installed '(epl use-package))
     (require 'use-package)
   #+end_src
** Konfigurering med use-package
   For å konfigurere pakker brukes use-package. Dessverre er det slik
   at evil (som er vim bindings) må kjøre sist av alle pakker for å
   kunne gjøre jobben sin. Jeg har lyst til å konfigurere pakker når
   jeg trekker inn pakkene jeg skal bruke. Denne funksjonen lar meg
   gjøre nettopp det.

   #+begin_src emacs-lisp
     ;; from <https://github.com/bling/dotemacs/>
     (defmacro after (feature &rest body)
       "After FEATURE is loaded, evaluate BODY."
       (declare (indent defun))
       `(eval-after-load ,feature
          '(progn ,@body)))
   #+end_src

** Noen pakker liker custom.el
   Themes og slikt liker custom.el, og jeg har ikke lyst til å krangle.

   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (when (file-exists-p custom-file) (load custom-file))
   #+end_src

** Fornuftige default verdier
   Jeg veit ikke helt hva alle gjør og burde undersøke bedre..

   #+begin_src emacs-lisp
     ;; UTF-8 everything!
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)

     ;; Hide startup messages
     (setq inhibit-splash-screen t
           inhibit-startup-echo-area-message t
           inhibit-startup-message t)

     ;; number columns in the status bar
     (column-number-mode)

     ;; Flash the frame to represent a bell.
     (setq visible-bell t)
     ;; nevermind that's annoying
     (setq ring-bell-function 'ignore)

     ;; break long lines at word boundaries
     (visual-line-mode 1)

     ;; lockfiles are evil.
     (setq create-lockfiles nil)

     ;; also tabs are evil
     (setq-default indent-tabs-mode nil)

     ;; require a trailing newline
     (setq require-final-newline t)

     ;; The default of 16 is too low. Give me a 64-object mark ring.
     ;; Across all files, make it 128.
     (setq mark-ring-max 64)
     (setq global-mark-ring-max 128)

     ;; Display the current function name in the modeline.
     (which-function-mode 0)

     ;; Show me the new saved file if the contents change on disk when editing.
     (global-auto-revert-mode 1)

     ;; Split vertically, widscreen era
     (setq split-height-threshold nil)
     (setq split-width-threshold 180)

     ;; Enable the mouse in terminal mode.
     (xterm-mouse-mode 1)

     ;; trailing whitespace is evil
     (setq show-trailing-whitespace t)

     ;; y=yes n=no
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+End_src

** Ikke forsøple filtreet med midlertidige filer
   #+begin_src emacs-lisp
     (defvar my-auto-save-folder "~/.emacs.d/.saves/")
     (setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
     (setq auto-save-file-name-transforms
           `((".*" ,my-auto-save-folder t)))
   #+end_src
** Browser
   #+begin_src emacs-lisp
     (if window-system
         (setq browse-url-browser-function 'browse-url-generic
               browse-url-generic-program "x-www-browser"))
   #+end_src
** Undotree
   #+begin_src emacs-lisp
     (use-package undo-tree
       :diminish undo-tree-mode
       :init (global-undo-tree-mode))
   #+end_src
** anzu
   vis søketreff i modeline
   #+begin_src emacs-lisp
     (use-package anzu
       :ensure t
       :init
       (global-anzu-mode)
       :config
       (setq anzu-search-threshold 1000
             anzu-cons-mode-line-p nil))
   #+end_src
** auto-save like Intellij
   
   #+begin_src emacs-lisp
     (defadvice switch-to-buffer (before save-buffer-now activate)
       (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
     (defadvice other-window (before other-window-now activate)
       (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
     (defadvice windmove-up (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-down (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-left (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-right (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
   #+end_src

* OS X
  #+begin_src emacs-lisp
    (when (memq window-system '(mac ns))

      ;;(use-package exec-path-from-shell
      ;;  :config (exec-path-from-shell-initialize))

      (setq browse-url-browser-function 'browse-url-default-macosx-browser)

      (setq mac-option-modifier nil
            mac-command-modifier 'meta
            x-select-enable-clipboard t))
  #+end_src
* Utseende
** Fargetema

   #+begin_src emacs-lisp
     (use-package monokai-theme
       :ensure t
       :disabled t
       :init (load-theme 'monokai t))

     (use-package ample-theme
       :ensure t
       :init (load-theme 'ample t))
   #+end_src

** Smooth scroll

   #+begin_src emacs-lisp
     (use-package smooth-scroll
       :ensure t
       :diminish smooth-scroll-mode
       :config
       (progn
         (setq scroll-margin 5
               scroll-conservatively 9999
               scroll-step 1)
         (smooth-scroll-mode)))
   #+end_src
   
** Spaceline
   #+begin_src emacs-lisp 
     (use-package window-numbering
       :ensure t
       :init
       (window-numbering-mode))
     (use-package spaceline
       :ensure t
       :init
       (require 'spaceline-config)
       (spaceline-spacemacs-theme)
       :config
       (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
       (setq spaceline-window-numbers-unicode t)
       (setq spaceline-workspace-numbers-unicode t)
       (setq powerline-default-separator 'wave))
   #+end_src

* Helm
  #+begin_src emacs-lisp
    (use-package helm
      :ensure t
      :bind (("M-x" . helm-M-x)
             ("M-b" . helm-buffers-list)))

    (use-package helm-ag
      :ensure t
      :commands (helm-do-ag))
  #+end_src
  
* Dev
** tabs

   #+begin_src emacs-lisp
     (setq-default tab-width 2)
   #+end_src

** Uthev TODO
  #+begin_src emacs-lisp
    (defun laat/add-watchwords ()
      (font-lock-add-keywords
       nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\|XXX\\)\\>"
              1 '((:foreground "#d7a3ad") (:weight bold)) t))))
    (add-hook 'prog-mode-hook 'laat/add-watchwords)
  #+end_src

** whitespace cleanup
   #+begin_src emacs-lisp
     (use-package whitespace-cleanup-mode
       :ensure t
       :diminish whitespace-cleanup-mode
       :commands whitespace-cleanup-mode
       :init (add-hook 'prog-mode-hook 'whitespace-cleanup-mode))
   #+end_src
** Rainbow-delimiters
  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure
      :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  #+end_src

** Snippets
   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :mode ("/\\.emacs.d/snippets/" . snippet-mode)
       :config
       (yas-reload-all)
       (add-hook 'prog-mode-hook #'yas-minor-mode))
   #+end_src

** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish flycheck-mode
       :init (add-hook 'after-init-hook 'global-flycheck-mode)
       :config
       (setq flycheck-check-syntax-automatically '(save mode-enabled)))
   #+end_src

** Autocomplete
   #+begin_src emacs-lisp
     (use-package company
       :ensure t
       :diminish company-mode
       :config
       (global-company-mode))
   #+end_src

** Smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :diminish smartparens-mode
       :init
       (progn
         (use-package smartparens-config)
         (use-package smartparens-html)
         (smartparens-global-mode 1)
         (show-smartparens-global-mode 1)))
   #+end_src
** Vertikal linje ved 80 tegn
   #+begin_src emacs-lisp :tangle no
     (use-package fill-column-indicator
       :ensure t
       :init (add-hook 'prog-mode-hook 'fci-mode)
       :config (setq-default fci-rule-column 80))
   #+end_src
** unicode troll stopper
   #+begin_src emacs-lisp
     (use-package unicode-troll-stopper
       :ensure t
       :diminish unicode-troll-stopper-mode
       :init
       (add-hook 'prog-mode-hook #'unicode-troll-stopper-mode))
   #+end_src
** agressive-indent
   #+begin_src emacs-lisp
     (use-package aggressive-indent
       :ensure t
       :init
       (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))
   #+end_src

* Langs
** Webutvikling
*** emmet
    #+begin_src emacs-lisp
      (use-package emmet-mode
        :ensure t
        :init
        (progn
          (add-hook 'web-mode-hook 'emmet-mode)
          (add-hook 'html-mode-hook 'emmet-mode)
          (add-hook 'css-mode-hook 'emmet-mode))
        :config
        (after 'evil
          (evil-define-key 'insert emmet-mode-keymap (kbd "TAB") 'emmet-expand-yas)
          (evil-define-key 'insert emmet-mode-keymap (kbd "<tab>") 'emmet-expand-yas)
          (evil-define-key 'emacs emmet-mode-keymap (kbd "TAB") 'emmet-expand-yas)
          (evil-define-key 'emacs emmet-mode-keymap (kbd "<tab>") 'emmet-expand-yas)))
    #+end_src

*** HTML og templates
    #+begin_src emacs-lisp
      (use-package haml-mode
        :ensure t)
      (use-package web-mode
        :ensure t
        :mode (("\\.html?$" . web-mode)
               ("\\.jsx$" . web-mode))
        :config
        (after 'flycheck
          (flycheck-add-mode 'javascript-eslint 'web-mode)))
    #+end_src

*** CSS
    #+begin_src emacs-lisp
      (use-package less-css-mode
        :ensure t
        :defer t
        :mode ("\\.less\\'" . less-css-mode))
      (use-package sass-mode
        :ensure t
        :defer t
        :mode ("\\.sass\\'" . sass-mode))
      (use-package scss-mode
        :ensure t
        :defer t
        :mode ("\\.scss\\'" . scss-mode))
      (use-package rainbow-mode
        :ensure t
        :defer t
        :commands rainbow-mode)
    #+end_src

    #+RESULTS:

*** JavaScript
    #+begin_src emacs-lisp
      (use-package tern
        :init (add-hook 'js2-mode-hook 'tern-mode)
        :ensure t)

      (use-package company-tern
        :ensure t
        :config
        (after 'company
          (add-to-list 'company-backends 'company-tern)))

      (use-package js2-mode
        :ensure t
        :mode (("\\.js$" . js2-mode))
        :config
        (setq js2-include-node-externs t)
        (add-hook 'js2-mode-hook 'flycheck-mode))

      (use-package js2-refactor
        :ensure t
        :init (add-hook 'js2-mode-hook 'js2-refactor-mode))

      (after 'hydra
        (defhydra laat/js2r-slurp-barf-hydra (:color red)
          "slurp barf"
          ("s" js2r-forward-slurp "slurp")
          ("S" js2r-forward-barf "barf"))
        (defun laat/js2r-slurp ()
          (interactive)
          (js2r-forward-slurp)
          (laat/js2r-slurp-barf-hydra/body))
        (defun laat/js2r-barf ()
          (interactive)
          (js2r-forward-barf)
          (laat/js2r-slurp-barf-hydra/body))


        (after 'evil
          (evil-leader/set-key-for-mode 'js2-mode "s" 'laat/js2r-slurp)
          (evil-leader/set-key-for-mode 'js2-mode "S" 'laat/js2r-barf)))

      (use-package json-mode
        :ensure t
        :config
        (add-hook 'json-mode-hook 'flycheck-mode))
    #+end_src
    
**** eslint i prosjekter
     legg dette i ~.dir-locals.el~
     #+begin_src emacs-lisp :tangle no
       ((js2-mode (flycheck-disabled-checkers . (javascript-jshint))))
     #+end_src
     
*** AngularJS
    #+begin_src emacs-lisp
      (after 'web-mode
        (after 'yasnippet
          (use-package angular-snippets
            :ensure t
            :config
            (angular-snippets-initialize))))
    #+end_src
** Cucumber
   #+begin_src emacs-lisp
     (use-package feature-mode
       :ensure t
       :mode ("\\.feature$" . feature-mode)
       :config
       (add-hook 'feature-mode-hook
                 (lambda ()
                   (electric-indent-mode -1))))
   #+end_src
** Yaml
  #+begin_src emacs-lisp
    (use-package yaml-mode
      :ensure t
      :mode (("\\.yaml\\'" . yaml-mode)
             ("\\.yml\\'" . yaml-mode)))
  #+end_src

** Markdown
  #+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
      :config (add-hook 'markdown-mode-hook 'visual-line-mode))
  #+end_src
** ssh-config-mode
   #+begin_src emacs-lisp
     (use-package ssh-config-mode
       :ensure t)
   #+end_src
** nginx-mode
   #+begin_src emacs-lisp
     (use-package nginx-mode
       :ensure t)
   #+end_src
** SystemD
   #+begin_src emacs-lisp
     (use-package systemd
       :ensure t
       :init
       (after 'company
         (add-to-list 'company-backends 'systemd-company-backend)))
   #+end_src
** Ansible
   #+begin_src emacs-lisp
     (use-package ansible
       :ensure t)

     (use-package ansible-doc
       :ensure t
       :config
       (after 'evil
         (evil-leader/set-key-for-mode 'yaml-mode "a" 'ansible-doc)))

     (defun laat/enable-ansible-hook ()
       (cond ((string-match "\\(site\.yml\\|roles/.+\.yml\\|group_vars/.+\\|host_vars/.+\\)" buffer-file-name)
              (progn
                (yas-minor-mode 1)
                (ansible 1)
                (ansible-doc-mode)))))
     (add-hook 'yaml-mode-hook 'laat/enable-ansible-hook)
   #+end_src

* Nyttig Diverse
** emoji
   #+begin_src emacs-lisp
     (use-package emoji-fontset
       :ensure t
       :if window-system
       :config
       ;; apt-get install ttf-ancient-fonts
       (emoji-fontset-enable "Symbola"))

     (after 'company
       (use-package company-emoji
         :ensure t
         :config
         (add-to-list 'company-backends 'company-emoji)))
   #+end_src
** paradox
   #+begin_src emacs-lisp
     (use-package paradox
       :ensure t)
   #+end_src
** discover-my-major
   #+begin_src emacs-lisp
     (use-package discover-my-major
       :ensure t)
   #+end_src
** Htmlize
   Lag html av buffere og tekst med syntaxhighlighting.

   #+begin_src emacs-lisp
     (use-package htmlize
       :ensure t)
   #+end_src
** Spotify
   #+begin_src emacs-lisp
     (use-package spotify
       :ensure t
       :config
       (after 'hydra
         (defhydra laat/spotify-hydra (:color teal)
           "spotify"
           ("p" spotify-playpause "play/pause")
           ("n" spotify-next "next")
           ("N" spotify-previous "previous")
           ("Q" spotify-quit "quit"))))
   #+end_src
* Jabber
  #+begin_src emacs-lisp :tangle no
     (use-package jabber
       :ensure
       :commands jabber-connect
       :config
       (setq jabber-account-list
             '(("sigurd@fosseng.net"
                (:network-server . "talk.google.com")
                (:connection-type . ssl)))))
  #+end_src
* Org
  #+begin_src emacs-lisp
    (use-package org
      :pin manual
      :mode ("\\.org$" . org-mode)
      :config
      (add-hook 'org-mode-hook #'yas-minor-mode)
      (setq org-src-fontify-natively t)
      ;;(setq org-confirm-babel-evaluate nil) ;; TODO: research this
      (after 'evil
        (evil-define-key 'normal 'org-mode-map
          "$" 'org-end-of-line
          "^" 'org-beginning-of-line
          "<" 'org-metaleft
          ">" 'org-metaright)
        (evil-leader/set-key-for-mode 'org-mode "t" 'org-todo)
        (evil-leader/set-key-for-mode 'org-mode "a" 'org-agenda)
        (evil-leader/set-key-for-mode 'org-mode "e" 'org-export-dispatch)
        (evil-leader/set-key-for-mode 'org-mode "r" 'org-babel-remove-result)
        (evil-leader/set-key-for-mode 'org-mode "x" 'org-edit-special)
        (evil-leader/set-key-for-mode 'org-mode "c" 'org-ctrl-c-ctrl-c)))
  #+end_src
** Pretty bulletpoings
   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :init (add-hook 'org-mode-hook 'org-bullets-mode)
       :config (setq org-bullets-bullet-list '("▸" "•")))
   #+end_src
** Presentation mode
   #+begin_src emacs-lisp
     (use-package org-present
       :ensure t
       :init
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (evil-emacs-state)
                   (org-present-big)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (evil-normal-state)
                   (org-present-small)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write))))
   #+end_src

** Literate programming
*** HTTP
    https://github.com/zweifisch/ob-http
**** example
     #+begin_src http :tangle no
       GET http://httpbin.org/user-agent
       User-Agent: ob-http
     #+end_src

**** package
     #+begin_src emacs-lisp
        (use-package ob-http
          :ensure t)
     #+end_src
     
*** Browser
    https://github.com/krisajenkins/ob-browser
**** package
     #+begin_src emacs-lisp
        (use-package ob-browser
          :ensure t)
     #+end_src

*** TODO Mongo
    #+begin_src emacs-lisp :tangle no
      (use-package ob-mongo
        :ensure t)
    #+end_src
*** org-babel språk
    #+begin_src emacs-lisp
      (after 'org
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (http . t)
           (sh . t)
           ;;(mongo . t)
           (browser . t)
           (python . t)
           )))
    #+end_src
        
* Git
  #+begin_src emacs-lisp
    (use-package gitconfig-mode
      :ensure t
      :mode "\\.?gitconfig\\'")

    (use-package gitignore-mode
      :ensure t
      :mode "\\.?gitignore\\'")

    (use-package gitattributes-mode
      :ensure t
      :mode "\\.?gitattributes\\'")

    (use-package helm-gitignore
      :ensure t)

    (use-package diff-hl
      :ensure t
      :init
      (global-diff-hl-mode)
      (diff-hl-flydiff-mode))

    (use-package gist
      :ensure t)

    (use-package magit
      :ensure t
      :config
      (setq magit-last-seen-setup-instructions "1.4.0"))

    (use-package evil-magit
      :ensure t)

    (after 'hydra
      (defhydra laat/git-hydra (:color teal :idle 0.5)
        "git"
        ("s" magit-status "status")
        ("b" magit-blame-mode "blame")
        ("l" magit-log "log")
        ("C" magit-commit "Commit")
        ("i" helm-gitignore "gitignore")))
  #+end_src

* Docker
  #+begin_src emacs-lisp
    (use-package dockerfile-mode
      :ensure t)
    (use-package docker-tramp
      :ensure t)
   #+end_src
   
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure
      :diminish projectile-mode
      :init (projectile-global-mode))

    (use-package helm-projectile
      :ensure t
      :init
      (setq projectile-completion-system 'helm)
      (helm-projectile-on))

    (after 'hydra
      (defhydra laat/projectile-hydra (:color teal :hint nil :idle 0.4)
        "
                                                                        ╭────────────┐
        Files             Search          Buffer             extra      │ Projectile │
      ╭─────────────────────────────────────────────────────────────────┴────────────╯
        [_f_] file          [_a_] ag          [_b_] switch         [_o_] other project
        [_l_] file dwim     [_g_] grep        [_v_] show all       [_p_] projectile
        [_r_] recent file   [_s_] occur       [_V_] ibuffer        [_i_] info
        [_d_] dir           [_S_] replace     [_K_] kill all
        [_o_] other         [_t_] find tag
        [_u_] test file     [_T_] make tags
        [_h_] root

        Run             Cache
      ╭───────────────────────────────────╯
        [_U_] test        [_kc_] clear
        [_m_] compile     [_kk_] add current
        [_c_] shell       [_ks_] cleanup
        [_C_] command     [_kd_] remove
      --------------------------------------------------------------------------------
            "
        ("<tab>" hydra-master/body "back")
        ("<ESC>" nil "quit")
        ("a"   helm-projectile-ag)
        ("b"   helm-projectile-switch-to-buffer)
        ("c"   projectile-run-async-shell-command-in-root)
        ("C"   projectile-run-command-in-root)
        ("d"   helm-projectile-find-dir)
        ("f"   helm-projectile-find-file)
        ("g"   helm-projectile-grep)
        ("h"   projectile-dired)
        ("i"   projectile-project-info)
        ("kc"  projectile-invalidate-cache)
        ("kd"  projectile-remove-known-project)
        ("kk"  projectile-cache-current-file)
        ("K"   projectile-kill-buffers)
        ("ks"  projectile-cleanup-known-projects)
        ("l"   projectile-find-file-dwim)
        ("m"   projectile-compile-project)
        ("o"   helm-projectile-switch-project)
        ("p"   helm-projectile)
        ("r"   helm-projectile-recentf)
        ("s"   projectile-multi-occur)
        ("S"   projectile-replace)
        ("t"   projectile-find-tag)
        ("T"   projectile-regenerate-tags)
        ("u"   projectile-find-test-file)
        ("U"   projectile-test-project)
        ("v"   projectile-display-buffer)
        ("V"   projectile-ibuffer)
        )
      )
  #+end_src
* Editorconfig.org
  Jeg trives best etter major-modes for filer.
  #+begin_src emacs-lisp
   (use-package editorconfig
     :ensure t)
  #+end_src

* Edit with emacs
  http://github.com/stsquad/emacs_chrome
  #+begin_src emacs-lisp
    (use-package edit-server
      :ensure t
      :init (edit-server-start)
      :config (setq edit-server-default-major-mode 'markdown-mode))

    (use-package gmail-message-mode
      :ensure t)
  #+end_src

* Evil mode
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :init (evil-mode 1)
      :config
      ;; its a silly binding, but i am an additct
      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
      (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
      (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
      (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
      (define-key evil-motion-state-map (kbd "C-h") 'evil-window-left)
      (define-key evil-motion-state-map (kbd "C-j") 'evil-window-down)
      (define-key evil-motion-state-map (kbd "C-k") 'evil-window-up)
      (define-key evil-motion-state-map (kbd "C-l") 'evil-window-right)

      ;; esc quits
      (defun minibuffer-keyboard-quit ()
        "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
        (interactive)
        (if (and delete-selection-mode transient-mark-mode mark-active)
            (setq deactivate-mark  t)
          (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
          (abort-recursive-edit)))

      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      (global-set-key [escape] 'evil-exit-emacs-state)

      (use-package evil-surround
        :ensure t
        :config (global-evil-surround-mode 1))

      (use-package evil-leader
        :ensure t
        :commands (evil-leader-mode global-evil-leader-mode)
        :init (global-evil-leader-mode t)
        :config
        (defun laat/indent-buffer ()
          (interactive)
          (indent-region (point-min) (point-max) nil))

        (defun laat/indent-region-or-buffer ()
          (interactive)
          (save-excursion
            (if (region-active-p)
                (progn
                  (indent-region (region-beginning) (region-end))
                  (message "Intented selected region"))
              (progn
                (laat/indent-buffer)
                (message "Indented buffer")))))

        (evil-leader/set-leader ",")
        (evil-leader/set-key "b" 'laat/indent-region-or-buffer))

      (use-package evil-mc
        :ensure t
        :diminish evil-mc-mode
        :init (global-evil-mc-mode 1)))
  #+end_src

** Expand-region
   #+begin_src emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (after 'evil
         (define-key evil-normal-state-map (kbd "+") 'er/expand-region)))
   #+end_src

* Hydra
  #+begin_src emacs-lisp
    (use-package hydra
      :ensure t)

    ;; Window
    (use-package winner
      :init (winner-mode 1))

    (defhydra laat/window-hydra (:color red)
      "window"
      ("h" hydra-move-splitter-left)
      ("j" hydra-move-splitter-down)
      ("k" hydra-move-splitter-up)
      ("l" hydra-move-splitter-right)
      ("v" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)) 
       "split below" :exit t)
      ("s" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)) "split right" :exit t )
      ("u" winner-undo "undo")
      ("r" winner-redo "redo"))

    (defun hydra-move-splitter-left (arg)
      "Move window splitter left."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (shrink-window-horizontally arg)
        (enlarge-window-horizontally arg)))

    (defun hydra-move-splitter-right (arg)
      "Move window splitter right."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (enlarge-window-horizontally arg)
        (shrink-window-horizontally arg)))

    (defun hydra-move-splitter-up (arg)
      "Move window splitter up."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (enlarge-window arg)
        (shrink-window arg)))

    (defun hydra-move-splitter-down (arg)
      "Move window splitter down."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (shrink-window arg)
        (enlarge-window arg)))

    ;; Zoom
    (defhydra laat/zoom-hydra ()
      "zoom"
      ("0" (text-scale-set 0) "reset" :exit t)
      ("j" text-scale-increase "in")
      ("k" text-scale-decrease "out"))

    (defvar whitespace-mode nil)
    (defhydra laat/hydra-toggle ()
      "
                      _a_ abbrev-mode:       %`abbrev-mode
                      _d_ debug-on-error:    %`debug-on-error
                      _f_ auto-fill-mode:    %`auto-fill-function
                      _t_ truncate-lines:    %`truncate-lines
                      _w_ whitespace-mode:   %`whitespace-mode
                      "
      ("a" abbrev-mode nil)
      ("d" toggle-debug-on-error nil)
      ("f" auto-fill-mode nil)
      ("t" toggle-truncate-lines nil)
      ("w" whitespace-mode nil)
      ("q" nil "quit"))

    (defhydra laat/global-hydra (:color teal :idle 0.8)
      "global hydra"
      ("z" laat/zoom-hydra/body "zoom")
      ("w" laat/window-hydra/body "window")
      ("x" laat/hydra-toggle/body "toggle")
      ("s" laat/spotify-hydra/body "emacs-mode")

      ("b" helm-buffers-list "buffers")
      ("e" evil-emacs-state "emacs-mode")

      ("do" delete-other-windows :exit t)
      ("dw" delete-window :exit t)
      ("df" delete-frame :exit t)
      ("db" kill-this-buffer: :exit t)

      ("g" laat/git-hydra/body "git")
      ("p" laat/projectile-hydra/body "projectile")
      ("T" eshell "eshell")
      ("t" ansi-term "terminal"))

    (define-key evil-normal-state-map " " 'laat/global-hydra/body)
  #+end_src

* TODO TODO
** Powerline tema for smart-mode-line
   spaceline overtar
   #+begin_src emacs-lisp
     (use-package smart-mode-line
       :ensure t
       :disabled t
       :init (sml/setup)
       :config
       (use-package smart-mode-line-powerline-theme
         :ensure t
         :config (sml/apply-theme 'powerline))

       (after 'projectile
         (setq sml/use-projectile-p 'before-prefixes
               sml/projectile-replacement-format "[%s]")))
   #+end_src

** volatile-highlights
** Weechat
   Må få opp igjen server...
** Twitter
   hydra prosjektet på github har et godt oppsett i wiki
** GnuPG
** Python
** Dash
** JIRA
   1) jira-markup-mode
   2) jira.el
** Css Comb
